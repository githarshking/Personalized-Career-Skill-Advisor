# -*- coding: utf-8 -*-
"""app_v2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NhpV2a3uPTuFlwIZ9Y0Uoohl6spfQyNG
"""

# Commented out IPython magic to ensure Python compatibility.
# #
# # PASTE THIS UPDATED MULTI-PAGE CODE INTO THE FIRST CELL AND RUN IT
# #
# %%writefile app_v2.py
# import streamlit as st
# import google.generativeai as genai
# import os
# 
# # --- APP CONFIGURATION ---
# st.set_page_config(
#     page_title="SkillUp Advisor",
#     page_icon="🚀",
#     layout="centered",
# )
# 
# # --- API KEY HANDLING (Hardcoded) ---
# # WARNING: This is not secure. Do not share your code publicly with the key in it.
# API_KEY = "-----------------------------------------------------------------------"  # <--- PASTE YOUR KEY HERE
# st.session_state["GOOGLE_API_KEY"] = API_KEY
# 
# # --- PAGE MANAGEMENT ---
# # Initialize session state for page navigation if it doesn't exist
# if 'page' not in st.session_state:
#     st.session_state.page = 'home'
# if 'user_category' not in st.session_state:
#     st.session_state.user_category = ''
# 
# # Function to change page
# def set_page(page_name):
#     st.session_state.page = page_name
# 
# # --- AI PROMPT TEMPLATE (UPDATED) ---
# # The prompt now includes a placeholder for the user's category
# prompt_template = '''You are 'SkillUp', an expert AI career architect. Your primary mission is to provide clear, actionable, and encouraging career guidance to help users achieve their professional goals. Your advice MUST be meticulously tailored to the user's experience level, background, and aspirations.
# 
# Here is the user's complete profile:
# - User Status: {user_category}
# - Years of Experience: {years_of_experience}
# - Current/Previous Industry: {previous_industry}
# - Highest Degree: {degree}
# - Technical Skills: {user_skills}
# - Top 3 Soft Skills: {soft_skills}
# - Desired Future Field: {user_desired_field}
# - Work Preference: {work_preference}
# 
# Based on this detailed profile, generate a comprehensive career action plan in a structured Markdown format. The plan should have the following sections:
# 
# ### 🚀 Your Career Roadmap
# 
# **1. Immediate Target Role:** Suggest ONE specific job title that the user can realistically target *now* with their current skills.
#    - **Why this role?** Provide a one-sentence explanation connecting their existing skills to this role's requirements.
# 
# **2. Aspirational Target Role:** Suggest ONE next-level job title the user can aim for after upskilling.
#    - **Why this role?** Explain how it builds upon the immediate target role and aligns with their long-term goals.
# 
# ---
# 
# ### 📊 Skill Gap Analysis
# 
# * **✅ Core Strengths:** List the top 3-5 skills the user already possesses that are most valuable for their desired field.
# * **🎯 Key Skill Gaps:** List the top 3-5 most critical technical skills they are missing to be competitive for the aspirational role.
# * **🌱 Soft Skills to Highlight:** Mention 2-3 of their selected soft skills that are particularly important for their target roles and suggest how to demonstrate them.
# 
# ---
# 
# ### 📈 Your Personalized Action Plan
# 
# **1. 📚 Upskilling Pathway:** For each skill gap identified above, create a learning step.
#    - **Skill to Learn:** [Name of the skill]
#    - **Recommended Course:** Provide the name of a specific, highly-rated online course from a reputable platform (e.g., Coursera, Udemy, freeCodeCamp, edX).
#    - **Why this course?** Give a brief, one-sentence reason for the recommendation (e.g., "It's project-based and perfect for beginners," or "Covers advanced concepts required for senior roles").
# 
# **2. 💻 Portfolio-Builder Projects:** Suggest 2 distinct project ideas that will help the user practice their new skills and strengthen their resume.
#    - **Project Idea 1:** [Title of the project]. Briefly describe the project and list the key skills it would demonstrate.
#    - **Project Idea 2:** [Title of the project]. Briefly describe the project and list the key skills it would demonstrate.
# 
# ---
# 
# ### 📄 Resume & Interview Boosters
# 
# **1. Professional Summary:** Write a compelling, 2-3 sentence professional summary that the user can adapt for their resume or LinkedIn profile. This summary should fuse their background, key skills, and career aspirations.
# 
# **2. Impactful Bullet Points:** Provide 3 sample resume bullet points. Each bullet point should be an action-oriented statement that combines an existing skill with a potential project outcome. For example: "Developed a [Project Name] using Python and Pandas to analyze [X data], resulting in [Y outcome]."
# 
# Maintain a positive and motivational tone throughout. '''
# 
# # --- PAGE 1: HOME / CATEGORY SELECTION ---
# def page_home():
#     st.title("🚀 Welcome to SkillUp Advisor")
#     st.markdown("First, tell us a bit about yourself.")
# 
#     category = st.radio(
#         "Which of these best describes you?",
#         [
#             "A college student looking for my first role",
#             "A mid-career professional looking to switch fields",
#             "Someone who was recently laid off and needs to upskill"
#         ],
#         key="category_selection"
#     )
# 
#     if st.button("Proceed", key="proceed_button"):
#         st.session_state.user_category = category
#         set_page('details_form')
#         st.rerun()
# 
# # --- PAGE 2: DETAILS FORM & RESULTS ---
# def page_details_form():
#     st.title("📝 Tell Us About Your Goals")
#     st.info(f"**Your Category:** {st.session_state.user_category}")
# 
#     # Configure the Gemini API
#     try:
#         genai.configure(api_key=st.session_state["GOOGLE_API_KEY"])
#     except Exception as e:
#         st.error(f"Error configuring the Gemini API: {e}")
#         st.stop()
# 
#     with st.form("career_form"):
#         # The label for the first input changes based on the category
#         role_label = "What is your major or field of study?" if "student" in st.session_state.user_category else "What is your current or most recent job title?"
# 
#         current_role = st.text_input(role_label, placeholder="e.g., Computer Science or Project Manager")
#         Years_of_Experience = st.number_input("How many years of experience do you have?", min_value=0, max_value=50, step=1)
#         Current_Previous_Industry = st.text_input("What is your current or previous industry?", placeholder="e.g., Technology or Healthcare")
#         Highest_Degree = st.text_input("What is your highest degree ?", placeholder="e.g.,Bachelor of Engineering (BE) and Bachelor of Science (BS)," )
#         user_skills = st.text_area("List your skills (one per line or comma-separated)", placeholder="e.g., Python, Team Leadership, Budgeting")
#         Top_Soft_Skills = st.text_input("What are 3 soft skill do you have ?", placeholder="e.g., communication, teamwork," )
#         desired_field = st.text_input("What field do you want to move into?", placeholder="e.g., Data Science")
#         Work_Preference = st.text_input("what kind of work do you prefere ?", placeholder="e.g., Remote, Hybrid, and On-site")
# 
#         submit_button = st.form_submit_button("Get My Career Plan")
# 
#     if submit_button:
#         if not current_role or not user_skills or not desired_field:
#             st.warning("Please fill in all the fields to get your plan.")
#         else:
#             with st.spinner('Crafting your personalized career plan...'):
#                 try:
#                     model = genai.GenerativeModel('gemini-1.5-flash-latest')
#                     formatted_prompt = prompt_template.format(
#                         user_category=st.session_state.user_category,
# 
#                         user_current_role=current_role,
#                         years_of_experience=Years_of_Experience,
#                         previous_industry=Current_Previous_Industry,
#                         degree=Highest_Degree,
#                         user_skills=user_skills,
#                         soft_skills=Top_Soft_Skills,
#                         work_preference=Work_Preference,
#                         user_desired_field=desired_field
#                     )
#                     response = model.generate_content(formatted_prompt)
#                     st.subheader("✨ Your Personalized Plan from SkillUp Advisor")
#                     st.markdown(response.text)
#                 except Exception as e:
#                     st.error(f"An error occurred: {e}")
# 
#     if st.button("Go Back", key="back_button"):
#         set_page('home')
#         st.rerun()
# 
# # --- MAIN ROUTER ---
# # This logic decides which page to show
# if st.session_state.page == 'home':
#     page_home()
# elif st.session_state.page == 'details_form':
#     page_details_form()
#

#
# PASTE THIS INTO A SECOND CELL AND RUN IT
#
# Step 1: Install libraries
!pip install streamlit google-generativeai pyngrok -q

# Step 2: Set up and run ngrok
from pyngrok import ngrok, conf

# IMPORTANT: Replace with your own ngrok authtoken
NGROK_AUTH_TOKEN = "322iZ5TIiccfecVyJPgporCyvEE_B5GSjrYEFQdoJ57AH1MC"
conf.get_default().auth_token = NGROK_AUTH_TOKEN

# Disconnect any existing tunnels
ngrok.kill()

# Open a tunnel to the default streamlit port 8501
public_url = ngrok.connect(8501)
print(f"✅ Your app is live at: {public_url}")

# Step 3: Run the streamlit app
!streamlit run app_v2.py