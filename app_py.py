# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NhpV2a3uPTuFlwIZ9Y0Uoohl6spfQyNG
"""

# Commented out IPython magic to ensure Python compatibility.
# #
# # PASTE THIS CORRECTED CODE INTO THE FIRST CELL AND RUN IT
# #
# %%writefile app.py
# import streamlit as st
# import google.generativeai as genai
# import os
# 
# # --- SETUP ---
# st.set_page_config(
#     page_title="SkillUp Advisor",
#     page_icon="ðŸš€",
#     layout="centered",
# )
# 
# st.title("ðŸš€ Personalized Career & Skill Advisor")
# st.markdown("Get a tailored plan to transition into your dream career field.")
# 
# # --- API KEY HANDLING using Session State ---
# 
# # Initialize session state if key is not already present
# if "GOOGLE_API_KEY" not in st.session_state:
#     st.session_state["GOOGLE_API_KEY"] = ""
# 
# # Ask for the key if it's not already entered
# if not st.session_state["GOOGLE_API_KEY"]:
#     api_key_input = st.text_input("Enter your Google Gemini API Key:", type="password", key="api_key_input")
#     if api_key_input:
#         st.session_state["GOOGLE_API_KEY"] = api_key_input
#         st.rerun() # Rerun the script to use the new key
# 
# # --- MAIN APP LOGIC ---
# 
# # Only proceed if the API key is available in the session state
# if st.session_state["GOOGLE_API_KEY"]:
#     try:
#         genai.configure(api_key=st.session_state["GOOGLE_API_KEY"])
#     except Exception as e:
#         st.error(f"Error configuring the Gemini API: {e}")
#         st.stop() # Stop the app if API configuration fails
# 
#     # --- AI PROMPT TEMPLATE ---
#     prompt_template = """
#     You are an expert career and skills advisor named 'SkillUp'. Your goal is to help a user transition into a new career.
#     You must provide clear, concise, and actionable advice. Do not be conversational; get straight to the point.
# 
#     Here is the user's profile:
#     - Current Role: {user_current_role}
#     - Their Skills: {user_skills}
#     - Desired Future Field: {user_desired_field}
# 
#     Based on this information, please provide the following in a structured Markdown format:
# 
#     1.  **Recommended Target Role:** Suggest ONE specific, achievable job title in their desired field that best matches their current skills. Provide a brief, one-sentence explanation for your choice.
#     2.  **Skill Analysis:**
#         * **âœ… Matching Skills:** List the top 3-5 skills they already possess that are most valuable for the target role.
#         * **ðŸŽ¯ Skill Gaps:** List the top 3-5 most critical skills they are missing to be job-ready.
#     3.  **Actionable Learning Path:**
#         * For each skill gap, recommend one specific, highly-rated online course from a reputable platform (like Coursera, Udemy, freeCodeCamp, edX). Provide the course name and a brief, one-sentence reason for the recommendation.
#     """
# 
#     # --- USER INPUT FORM ---
#     with st.form("career_form"):
#         st.subheader("Tell us about yourself:")
#         current_role = st.text_input("What is your current job title?", placeholder="e.g., Project Manager")
#         user_skills = st.text_area("List your skills (one per line or comma-separated)", placeholder="e.g., Team Leadership, Budgeting, Agile Methodologies")
#         desired_field = st.text_input("What field do you want to move into?", placeholder="e.g., Data Science")
#         submit_button = st.form_submit_button("Get My Career Plan")
# 
#     # --- PROCESSING AND OUTPUT ---
#     if submit_button:
#         if not current_role or not user_skills or not desired_field:
#             st.warning("Please fill in all the fields to get your plan.")
#         else:
#             with st.spinner('Crafting your personalized career plan...'):
#                 try:
#                     model = genai.GenerativeModel('gemini-1.5-flash-latest')
#                     formatted_prompt = prompt_template.format(
#                         user_current_role=current_role,
#                         user_skills=user_skills,
#                         user_desired_field=desired_field
#                     )
#                     response = model.generate_content(formatted_prompt)
#                     st.subheader("âœ¨ Your Personalized Plan from SkillUp Advisor")
#                     st.markdown(response.text)
#                 except Exception as e:
#                     st.error(f"An error occurred: {e}")
# else:
#     st.warning("Please enter your Gemini API Key to begin.")
#

#
# PASTE THIS INTO A SECOND CELL AND RUN IT
#
# Step 1: Install libraries
!pip install streamlit google-generativeai pyngrok -q

# Step 2: Set up and run ngrok
from pyngrok import ngrok, conf

# IMPORTANT: Replace with your own ngrok authtoken
NGROK_AUTH_TOKEN = "322iZ5TIiccfecVyJPgporCyvEE_B5GSjrYEFQdoJ57AH1MC"
conf.get_default().auth_token = NGROK_AUTH_TOKEN

# Disconnect any existing tunnels
ngrok.kill()

# Open a tunnel to the default streamlit port 8501
public_url = ngrok.connect(8501)
print(f"âœ… Your app is live at: {public_url}")

# Step 3: Run the streamlit app
!streamlit run app.py