# -*- coding: utf-8 -*-
"""app_v1.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RncxsMNzTggGqZZMrwBo4EOf8CWi-DNP
"""

# Commented out IPython magic to ensure Python compatibility.
# #
# # PASTE THIS UPDATED MULTI-PAGE CODE INTO THE FIRST CELL AND RUN IT
# #
# %%writefile app_v1.py
# import streamlit as st
# import google.generativeai as genai
# import os
# 
# # --- APP CONFIGURATION ---
# st.set_page_config(
#     page_title="SkillUp Advisor",
#     page_icon="🚀",
#     layout="centered",
# )
# 
# # --- API KEY HANDLING (Hardcoded) ---
# # WARNING: This is not secure. Do not share your code publicly with the key in it.
# API_KEY = "AIzaSyB5Sjc0qHnJFVtpkgazJ5iRLewie9-hyxc"  # <--- PASTE YOUR KEY HERE
# st.session_state["GOOGLE_API_KEY"] = API_KEY
# 
# # --- PAGE MANAGEMENT ---
# # Initialize session state for page navigation if it doesn't exist
# if 'page' not in st.session_state:
#     st.session_state.page = 'home'
# if 'user_category' not in st.session_state:
#     st.session_state.user_category = ''
# 
# # Function to change page
# def set_page(page_name):
#     st.session_state.page = page_name
# 
# # --- AI PROMPT TEMPLATE (UPDATED) ---
# # The prompt now includes a placeholder for the user's category
# prompt_template = """
# You are an expert career and skills advisor named 'SkillUp'. Your goal is to help a user transition into a new career.
# Your advice MUST be tailored to the user's specific category. For example, advice for a college student should focus on internships and entry-level roles, while advice for a mid-career professional should leverage their existing experience.
# 
# Here is the user's profile:
# - User Category: {user_category}
# - Current Role/Status: {user_current_role}
# - Their Skills: {user_skills}
# - Desired Future Field: {user_desired_field}
# 
# Based on this information, please provide the following in a structured Markdown format:
# 
# 1.  **Recommended Target Role:** Suggest ONE specific, achievable job title in their desired field that is highly relevant to their category and current skills. Provide a brief, one-sentence explanation for your choice.
# 2.  **Skill Analysis:**
#     * **✅ Matching Skills:** List the top 3-5 skills they already possess that are most valuable for the target role.
#     * **🎯 Skill Gaps:** List the top 3-5 most critical skills they are missing to be job-ready.
# 3.  **Actionable Learning Path:**
#     * For each skill gap, recommend one specific, highly-rated online course from a reputable platform (like Coursera, Udemy, freeCodeCamp, edX). Provide the course name and a brief, one-sentence reason for the recommendation.
# """
# 
# # --- PAGE 1: HOME / CATEGORY SELECTION ---
# def page_home():
#     st.title("🚀 Welcome to SkillUp Advisor")
#     st.markdown("First, tell us a bit about yourself.")
# 
#     category = st.radio(
#         "Which of these best describes you?",
#         [
#             "A college student looking for my first role",
#             "A mid-career professional looking to switch fields",
#             "Someone who was recently laid off and needs to upskill"
#         ],
#         key="category_selection"
#     )
# 
#     if st.button("Proceed", key="proceed_button"):
#         st.session_state.user_category = category
#         set_page('details_form')
#         st.rerun()
# 
# # --- PAGE 2: DETAILS FORM & RESULTS ---
# def page_details_form():
#     st.title("📝 Tell Us About Your Goals")
#     st.info(f"**Your Category:** {st.session_state.user_category}")
# 
#     # Configure the Gemini API
#     try:
#         genai.configure(api_key=st.session_state["GOOGLE_API_KEY"])
#     except Exception as e:
#         st.error(f"Error configuring the Gemini API: {e}")
#         st.stop()
# 
#     with st.form("career_form"):
#         # The label for the first input changes based on the category
#         role_label = "What is your major or field of study?" if "student" in st.session_state.user_category else "What is your current or most recent job title?"
# 
#         current_role = st.text_input(role_label, placeholder="e.g., Computer Science or Project Manager")
#         user_skills = st.text_area("List your skills (one per line or comma-separated)", placeholder="e.g., Python, Team Leadership, Budgeting")
#         desired_field = st.text_input("What field do you want to move into?", placeholder="e.g., Data Science")
# 
#         submit_button = st.form_submit_button("Get My Career Plan")
# 
#     if submit_button:
#         if not current_role or not user_skills or not desired_field:
#             st.warning("Please fill in all the fields to get your plan.")
#         else:
#             with st.spinner('Crafting your personalized career plan...'):
#                 try:
#                     model = genai.GenerativeModel('gemini-1.5-flash-latest')
#                     formatted_prompt = prompt_template.format(
#                         user_category=st.session_state.user_category,
#                         user_current_role=current_role,
#                         user_skills=user_skills,
#                         user_desired_field=desired_field
#                     )
#                     response = model.generate_content(formatted_prompt)
#                     st.subheader("✨ Your Personalized Plan from SkillUp Advisor")
#                     st.markdown(response.text)
#                 except Exception as e:
#                     st.error(f"An error occurred: {e}")
# 
#     if st.button("Go Back", key="back_button"):
#         set_page('home')
#         st.rerun()
# 
# # --- MAIN ROUTER ---
# # This logic decides which page to show
# if st.session_state.page == 'home':
#     page_home()
# elif st.session_state.page == 'details_form':
#     page_details_form()

#
# PASTE THIS INTO A SECOND CELL AND RUN IT
#
# Step 1: Install libraries
!pip install streamlit google-generativeai pyngrok -q

# Step 2: Set up and run ngrok
from pyngrok import ngrok, conf

# IMPORTANT: Replace with your own ngrok authtoken
NGROK_AUTH_TOKEN = "322iZ5TIiccfecVyJPgporCyvEE_B5GSjrYEFQdoJ57AH1MC"
conf.get_default().auth_token = NGROK_AUTH_TOKEN

# Disconnect any existing tunnels
ngrok.kill()

# Open a tunnel to the default streamlit port 8501
public_url = ngrok.connect(8501)
print(f"✅ Your app is live at: {public_url}")

# Step 3: Run the streamlit app
!streamlit run app_v1.py